<?xml version="1.0" encoding="UTF-8"?>
<syntax name="powershell">
    <meta>
        <name>PowerShell</name>
        <type>script</type>
        <preferred-file-extension>ps1</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env pwsh" />
    </meta>

    <detectors>
        <extension priority="1.0">ps1,psm1,psd1</extension>
    </detectors>

    <!-- TODO: Clean this up as appropriate; copied from Nova.app shell syntax definition -->
    <identifiers>
        <prefixes>
            <string>$</string>
        </prefixes>
    </identifiers>

    <!-- TODO: Define more appropriate indentation regex for pwsh. This is ripped from the shell syntax for now. -->
    <indentation>
        <increase>
            <expression>[.+]\s*\{\[\([^}|"']*$</expression>
            <!-- <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression> -->
        </increase>
        <decrease>
            <expression>^\s*[\}|\]|\)]\s*$</expression>
            <!-- <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression> -->
        </decrease>
    </indentation>

    <comments>
        <single>
            <expression>#</expression>
        </single>
        <multiline>
            <starts-with>
                <expression>&lt;#</expression>
            </starts-with>
            <ends-with>
                <expression>#&gt;</expression>
            </ends-with>
        </multiline>
    </comments>

    <brackets>
        <!-- <pair open="[" close="]" /> -->
        <pair open="{" close="}" />
        <pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <!-- <pair open="{" close="}" /> -->
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>

    <scopes spell-check="false">

        <!-- Comments -->
        <scope name="powershell.comment.block" spell-check="true">
            <starts-with>
                <expression>&lt;\#</expression> <!-- These escapes (\) seem to be necessary for Nova, unsure why; -->
            </starts-with>                      <!-- Without them, Nova seems to think EVERYTHING's a comment -->
            <ends-with>
                <expression>\#&gt;</expression> <!-- Escapes again seem necessary, not sure why :shrug: -->
            </ends-with>
        </scope>
        <!-- Note: It seems that Nova evaluates regexes in the order they're presented here, so single-line needs to
             come AFTER the multi-line stuff, otherwise the highlighting breaks down. Future optimization? -->
        <scope name="powershell.comment.single" spell-check="true">
            <starts-with>
                <expression>\#</expression> <!-- Again, escapes seem necessary for some unknown reason -->
            </starts-with>
            <ends-with>
                <expression>$</expression>
            </ends-with>
        </scope>

        <!-- Functions -->
        <scope name="powershell.definition.function">
            <symbol type="function" />
            <expression>(?|([F|f]unction)|(\[[a-zA-Z0-9\_\[\]]*\]))\s*([a-zA-Z0-9_\-]+)\s*(?|(\{)|(\())</expression>
            <capture number="1" name="powershell.function.keyword" />
            <capture number="2" name="powershell.identifier.function.name" />
            <subscopes>
                <scope name="powershell.arguments">
                    <expression>\[[P|p]arameter\s*\(.+\)\]\s*\[.+\]\s*\$[^,.+]$</expression>
                    <!-- <starts-with>
                        <expression>\([P|p]aram(\(.*\))*</expression>
                        <capture number="0" name="powershell.bracket" />
                    </starts-with>
                    <ends-with>
                        <expression>\]</expression>
                        <capture number="0" name="powershell.bracket" />
                    </ends-with> -->
                    <subscopes>
                        <scope name="powershell.separator">
                            <expression>,</expression>
                        </scope>
                    </subscopes>
                </scope>
            </subscopes>
        </scope>

        <!-- Data Types -->
        <scope name="powershell.definition.type">
            <symbol name="type" />
            <expression>\[([a-zA-Z0-9_\-\[\]\.]+)\]</expression>
            <capture number="1" name="powershell.type.keyword" />
        </scope>

        <!-- Classes -->
        <scope name="powershell.definition.class">
            <symbol type="class" />
            <starts-with>
                <expression>(class)\s+([[:alnum:][\-_0-9?]+)</expression>
                <capture number="1" name="powershell.class.keyword" />
                <capture number="2" name="powershell.identifier.class.name" />
            </starts-with>
            <ends-with>
                <expression>\s*\{</expression>
            </ends-with>
        </scope>

        <!-- Variables -->
        <scope name="powershell.identifier.variable">
            <expression>\$([[:alnum:]_\:\.]+)</expression>
        </scope>

        <!-- Numbers + Values -->
        <scope name="powershell.value.number">
            <expression>[^a-zA-Z&quot;&apos;\-_][0-9]+</expression>
        </scope>
        <scope name="powershell.value.boolean">
            <expression>\$[T|t]rue</expression>
        </scope>
        <scope name="powershell.value.boolean">
            <expression>\$[F|f]alse</expression>
        </scope>
        <scope name="powershell.value.null">
            <expression>\$[N|n]ull</expression>
        </scope>

        <!-- Escape Sequence -->
        <scope name="powershell.escape">
            <expression>`[^\s]</expression>
        </scope>

        <!-- Strings -->
        <scope name="powershell.string.double-quoted">
            <expression>&quot;.*&quot;</expression>
        </scope>
        <scope name="powershell.string.single-quoted">
            <expression>&apos;.*&apos;</expression>
        </scope>

        <!-- Keywords -->
        <!-- TODO: Clean this up a little and add all the officially supported constructors per ms docs -->
        <scope name="powershell.keyword.construct">
            <expression>\s*Begin|Process|End\s*</expression>
            <expression>using\s+(?|(module)|(namespace))</expression>
        </scope>
        <scope name="powershell.keyword.condition">
            <expression>[I|i]f</expression>
            <expression>[W|w]hile</expression>
            <expression>[T|t]ry</expression>
            <expression>[C|c]atch</expression>
            <expression>[E|e]lse</expression>
        </scope>
        <scope name="powershell.keyword.self">
            <expression>\$this</expression>
        </scope>
    </scopes>

</syntax>
