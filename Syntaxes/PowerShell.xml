<?xml version="1.0" encoding="UTF-8"?>
<syntax name="powershell">
    <meta>
        <name>PowerShell</name>
        <type>script</type>
        <preferred-file-extension>ps1</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env pwsh" />
    </meta>

    <detectors>
        <extension priority="1.0">ps1,psm1,psd1</extension>
    </detectors>

    <!-- TODO: Clean this up as appropriate; copied from Nova.app shell syntax definition -->
    <identifiers>
        <prefixes>
            <string>$</string>
        </prefixes>
    </identifiers>

    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>

    <comments>
        <single>
            <expression>#</expression>
        </single>
        <!-- <multiline>
            <starts-with>
                <expression>&lt;#</expression>
            </starts-with>
            <ends-with>
                <expression>#&gt;</expression>
            </ends-with>
        </multiline> -->
    </comments>

    <brackets>
        <pair open="[" close="]" />
        <pair open="{" close="}" />
        <pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>

    <scopes spell-check="false">

        <!-- Comments -->
        <scope name="powershell.comment.block" spell-check="true">
            <starts-with>
                <expression>&lt;\#</expression>
            </starts-with>
            <ends-with>
                <expression>\#&gt;</expression>
            </ends-with>
        </scope>
        <!-- Note: It seems that Nova evaluates regexes in the order they're presented here, so single-line needs to
             come AFTER the multi-line stuff, otherwise the highlighting breaks down. Future optimization? -->
        <scope name="powershell.comment.single" spell-check="true">
            <expression>\#.*$</expression>
        </scope>

        <!-- Functions -->
        <scope name="powershell.definition.function">
            <symbol type="function" />
            <starts-with>
                <expression>(function)\s+([a-zA-Z0-9_\-]+)</expression>
                <capture number="1" name="powershell.function.keyword" />
                <capture number="2" name="powershell.identifier.function.name" />
            </starts-with>
            <ends-with>
                <expression>(\{)|$</expression>
            </ends-with>
            <subscopes>
                <scope name="powershell.arguments">
                    <starts-with>
                        <expression>\[[P|p]arameter(\(.*\))*</expression>
                        <capture number="0" name="powershell.bracket" />
                    </starts-with>
                    <ends-with>
                        <expression>\]</expression>
                        <capture number="0" name="powershell.bracket" />
                    </ends-with>
                    <subscopes>
                        <scope name="powershell.separator">
                            <expression>,</expression>
                        </scope>
                    </subscopes>
                </scope>
            </subscopes>
        </scope>

        <!-- Data Types -->
        <scope name="powershell.definition.type">
            <symbol name="type" />
            <expression>(\[[[:alnum:][\.]*[[:alnum:]]+\])[\$?]([[:alnum:]\-_]+)</expression>
            <capture number="1" name="powershell.type.keyword" />
            <!-- <capture number="2" name="powershell.identifier.variable.name" /> -->
        </scope>

        <!-- Classes -->
        <scope name="powershell.definition.class">
            <symbol type="class" />
            <starts-with>
                <expression>(class)\s+([[:alnum:][\-_0-9?]+)</expression>
                <capture number="1" name="powershell.class.keyword" />
                <capture number="2" name="powershell.identifier.class.name" />
            </starts-with>
            <ends-with>
                <expression>(\{)|$</expression>
            </ends-with>
        </scope>

        <!-- Variables -->
        <scope name="powershell.identifier.variable">
            <symbol type="variable" scope="local" />
            <!-- <expression>(\$[[[:alnum:]]\-]+)[?\.]([?a-zA-Z0-9_]+)</expression> -->
            <expression>(\$[[:alnum:]][\-?]+)([[\.?][[:alnum:]?]+)?</expression>
            <capture number="1" name="powershell.identifier.variable" />
            <capture number="2" name="powershell.identifier.property" />
        </scope>

        <!-- Key/Value pairs -->
        <!-- TODO: This is half baked, turning it off for now. -->
        <!-- <scope name="powershell.identifier.key">
            <symbol type="key" scope="local" />
            <expression>(\@\{)([[:alnum:]+])[.*]\&quot;([[:alnum:]]+)\&quot;</expression>
            <capture number="1" name="powershell.identifier.key" />
            <capture number="2" name="powershell.string-template.value" />
        </scope> -->

        <!-- Numbers + Values -->
        <scope name="powershell.value.number">
            <expression>[0-9]+</expression>
        </scope>
        <scope name="powershell.value.boolean">
            <expression>\$[T|t]rue</expression>
        </scope>
        <scope name="powershell.value.boolean">
            <expression>\$[F|f]alse</expression>
        </scope>
        <scope name="powershell.value.null">
            <expression>\$[N|n]ull</expression>
        </scope>

        <!-- Escape Sequence -->
        <scope name="powershell.escape">
            <expression>\\.</expression>
        </scope>

        <!-- Strings -->
        <scope name="powershell.string.double-quoted">
            <starts-with>
                <expression>&quot;</expression>
            </starts-with>
            <ends-with>
                <expression>(\\\\)*&quot;</expression>
            </ends-with>
            <subscopes>
                <scope name="powershell.string.double-quoted.escape">
                    <expression>\\(\\|&quot;)</expression>
                </scope>
            </subscopes>
        </scope>
        <scope name="powershell.string.single-quoted">
            <starts-with>
                <expression>&apos;</expression>
            </starts-with>
            <ends-with>
                <expression>(\\\\)*&apos;</expression>
            </ends-with>
            <subscopes>
                <scope name="powershell.string.single-quoted.escape">
                    <expression>\\(\\|&apos;)</expression>
                </scope>
            </subscopes>
        </scope>

        <!-- String interpolation -->
        <!-- TODO: Need more thorough testing, can't tell if regex is wrong or my theme just doesn't highlight this -->
        <scope name="powershell.string-template">
            <starts-with>
                <expression>\$</expression>
                <capture number="0" name="powershell.string-template" />
            </starts-with>
            <ends-with>
                <expression>[^[:alnum:]]</expression>
                <capture number="0" name="powershell.string-template" />
            </ends-with>
        </scope>

        <!-- Keywords -->
        <!-- TODO: Clean this up a little and add all the officially supported constructors per ms docs -->
        <scope name="powershell.keyword.construct">
            <expression>[F|f]unction</expression>
            <expression>[C|c]lass</expression>
            <expression>[B|b]egin</expression>
            <expression>[P|p]rocess</expression>
            <expression>[E|e]nd</expression>
        </scope>
        <scope name="powershell.keyword.condition">
            <expression>if</expression>
            <expression>while</expression>
            <expression>try</expression>
            <expression>catch</expression>
        </scope>
        <scope name="powershell.keyword.self">
            <expression>\$this\</expression>
        </scope>
    </scopes>

</syntax>
